{"version":3,"sources":["Header.js","Item.js","ListItems.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","sum","items","map","item","price","value","type","name","onChange","handleNameChange","Item","className","disabled","onClick","handleValue","ListItems","Table","state","id","e","setState","target","option","this","Component","App","total","resetTotal","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2OAsBeA,EApBA,SAAAC,GACb,IAAIC,EAAM,EAGV,OAFYD,EAAME,MACZC,KAAI,SAAAC,GAAI,OAAKH,GAAOG,EAAKC,MAAQD,EAAKE,SAE1C,gCACE,uCACQ,gCAASL,GADjB,QAGA,8BACE,2BACEM,KAAK,OACLD,MAAON,EAAMQ,KACbC,SAAUT,EAAMU,sBCMXC,EAnBF,SAAAX,GACX,IAAII,EAAOJ,EAAMI,KACjB,OACE,4BACGA,EAAKI,KADR,IACeJ,EAAKC,MADpB,OAEE,yBAAKO,UAAU,SACb,4BACEC,SAAyB,IAAfT,EAAKE,MACfQ,QAAS,kBAAMd,EAAMe,YAAYX,EAAKI,KAAM,WAF9C,KAMCJ,EAAKE,MACN,4BAAQQ,QAAS,kBAAMd,EAAMe,YAAYX,EAAKI,KAAM,UAApD,QCLOQ,EAPG,SAAAhB,GAChB,IAAIE,EAAQF,EAAME,MAAMC,KAAI,SAAAC,GAAI,OAC9B,kBAAC,EAAD,CAAMA,KAAMA,EAAMW,YAAaf,EAAMe,iBAEvC,OAAO,4BAAKb,ICyCCe,E,2MA3CbC,MAAQ,CACNhB,MAAO,CACL,CAAEiB,GAAI,EAAGX,KAAM,OAAQH,MAAO,GAAIC,MAAO,GACzC,CAAEa,GAAI,EAAGX,KAAM,UAAWH,MAAO,GAAIC,MAAO,GAC5C,CAAEa,GAAI,EAAGX,KAAM,SAAUH,MAAO,GAAIC,MAAO,IAE7CE,KAAM,I,EAGRE,iBAAmB,SAAAU,GACjB,EAAKC,SAAS,CACZb,KAAMY,EAAEE,OAAOhB,S,EAInBS,YAAc,SAACP,EAAMe,GACnB,IAAMrB,EAAQ,EAAKgB,MAAMhB,MAAMC,KAAI,SAAAC,GASjC,OARII,IAASJ,EAAKI,OACD,SAAXe,GACFnB,EAAKE,QAEQ,UAAXiB,GACFnB,EAAKE,SAGFF,KAET,EAAKiB,SAAS,CAAEnB,MAAOA,K,wEAGvB,OACE,yBAAKU,UAAU,SACb,kBAAC,EAAD,CACEV,MAAOsB,KAAKN,MAAMhB,MAClBM,KAAMgB,KAAKN,MAAMV,KACjBE,iBAAkBc,KAAKd,mBAEzB,kBAAC,EAAD,CAAWR,MAAOsB,KAAKN,MAAMhB,MAAOa,YAAaS,KAAKT,mB,GAtC1CU,aC8BLC,G,iNA7BbR,MAAQ,CAAES,MAAO,I,EAEjBC,WAAa,WACX,EAAKP,SAAS,CACZM,MAAO,K,wEAIT,OACE,oCACE,wBAAIf,UAAU,OAAd,SACSY,KAAKN,MAAMS,MAAO,IACzB,4BAAQb,QAASU,KAAKI,YAAtB,UAEF,kBAAC,EAAD,CAAOD,MAAOH,KAAKN,MAAMS,QACzB,kBAAC,EAAD,CAAOA,MAAOH,KAAKN,MAAMS,QACzB,kBAAC,EAAD,CAAOA,MAAOH,KAAKN,MAAMS,QACzB,kBAAC,EAAD,CAAOA,MAAOH,KAAKN,MAAMS,QACzB,kBAAC,EAAD,CAAOA,MAAOH,KAAKN,MAAMS,QACzB,kBAAC,EAAD,CAAOA,MAAOH,KAAKN,MAAMS,QACzB,kBAAC,EAAD,CAAOA,MAAOH,KAAKN,MAAMS,QACzB,kBAAC,EAAD,CAAOA,MAAOH,KAAKN,MAAMS,QACzB,kBAAC,EAAD,CAAOA,MAAOH,KAAKN,MAAMS,QACzB,kBAAC,EAAD,CAAOA,MAAOH,KAAKN,MAAMS,a,GAxBfF,cCQEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.add47bdc.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = props => {\r\n  let sum = 0;\r\n  let items = props.items;\r\n  items.map(item => (sum += item.price * item.value));\r\n  return (\r\n    <header>\r\n      <span>\r\n        SUMA: <strong>{sum}</strong> PLN\r\n      </span>\r\n      <span>\r\n        <input\r\n          type=\"text\"\r\n          value={props.name}\r\n          onChange={props.handleNameChange}\r\n        />\r\n      </span>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Item = props => {\r\n  let item = props.item;\r\n  return (\r\n    <li>\r\n      {item.name} {item.price} PLN\r\n      <div className=\"value\">\r\n        <button\r\n          disabled={item.value === 0 ? true : false}\r\n          onClick={() => props.handleValue(item.name, \"minus\")}\r\n        >\r\n          -\r\n        </button>\r\n        {item.value}\r\n        <button onClick={() => props.handleValue(item.name, \"plus\")}>+</button>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Item;\r\n","import React from \"react\";\r\nimport Item from \"./Item\";\r\n\r\nconst ListItems = props => {\r\n  let items = props.items.map(item => (\r\n    <Item item={item} handleValue={props.handleValue} />\r\n  ));\r\n  return <ul>{items}</ul>;\r\n};\r\n\r\nexport default ListItems;\r\n","import React, { Component } from \"react\";\r\nimport Header from \"./Header\";\r\nimport ListItems from \"./ListItems\";\r\n\r\nclass Table extends Component {\r\n  state = {\r\n    items: [\r\n      { id: 1, name: \"kawa\", price: 13, value: 0 },\r\n      { id: 2, name: \"wejscie\", price: 18, value: 0 },\r\n      { id: 3, name: \"ciasto\", price: 12, value: 0 }\r\n    ],\r\n    name: \"\"\r\n  };\r\n\r\n  handleNameChange = e => {\r\n    this.setState({\r\n      name: e.target.value\r\n    });\r\n  };\r\n\r\n  handleValue = (name, option) => {\r\n    const items = this.state.items.map(item => {\r\n      if (name === item.name) {\r\n        if (option === \"plus\") {\r\n          item.value++;\r\n        }\r\n        if (option === \"minus\") {\r\n          item.value--;\r\n        }\r\n      }\r\n      return item;\r\n    });\r\n    this.setState({ items: items });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"table\">\r\n        <Header\r\n          items={this.state.items}\r\n          name={this.state.name}\r\n          handleNameChange={this.handleNameChange}\r\n        />\r\n        <ListItems items={this.state.items} handleValue={this.handleValue} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from \"react\";\nimport Table from \"./Table\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { total: 10 };\n\n  resetTotal = () => {\n    this.setState({\n      total: 0\n    });\n  };\n  render() {\n    return (\n      <>\n        <h1 className=\"sum\">\n          Suma: {this.state.total}{\" \"}\n          <button onClick={this.resetTotal}>reset</button>\n        </h1>\n        <Table total={this.state.total} />\n        <Table total={this.state.total} />\n        <Table total={this.state.total} />\n        <Table total={this.state.total} />\n        <Table total={this.state.total} />\n        <Table total={this.state.total} />\n        <Table total={this.state.total} />\n        <Table total={this.state.total} />\n        <Table total={this.state.total} />\n        <Table total={this.state.total} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}